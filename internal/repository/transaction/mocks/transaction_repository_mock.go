// Code generated by MockGen. DO NOT EDIT.
// Source: transaction_repository.go

// Package mock_transaction is a generated GoMock package.
package mock_transaction

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/vnnyx/rekadigital-tech-test/internal/entity"
	helper "github.com/vnnyx/rekadigital-tech-test/internal/helper"
)

// MockTransactionRepository is a mock of TransactionRepository interface.
type MockTransactionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionRepositoryMockRecorder
}

// MockTransactionRepositoryMockRecorder is the mock recorder for MockTransactionRepository.
type MockTransactionRepositoryMockRecorder struct {
	mock *MockTransactionRepository
}

// NewMockTransactionRepository creates a new mock instance.
func NewMockTransactionRepository(ctrl *gomock.Controller) *MockTransactionRepository {
	mock := &MockTransactionRepository{ctrl: ctrl}
	mock.recorder = &MockTransactionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionRepository) EXPECT() *MockTransactionRepositoryMockRecorder {
	return m.recorder
}

// GetAllTransaction mocks base method.
func (m *MockTransactionRepository) GetAllTransaction(opt *helper.TransactionOptions) (*helper.Pagination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTransaction", opt)
	ret0, _ := ret[0].(*helper.Pagination)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTransaction indicates an expected call of GetAllTransaction.
func (mr *MockTransactionRepositoryMockRecorder) GetAllTransaction(opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTransaction", reflect.TypeOf((*MockTransactionRepository)(nil).GetAllTransaction), opt)
}

// StoreTransaction mocks base method.
func (m *MockTransactionRepository) StoreTransaction(transaction *entity.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreTransaction", transaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreTransaction indicates an expected call of StoreTransaction.
func (mr *MockTransactionRepositoryMockRecorder) StoreTransaction(transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreTransaction", reflect.TypeOf((*MockTransactionRepository)(nil).StoreTransaction), transaction)
}
